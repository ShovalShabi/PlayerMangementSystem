name: Player Management System CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  REGISTRY: docker.io
  IMAGE_NAME_BACKEND: ${{ secrets.DOCKERHUBUSERNAME }}/PlayerMangementSystem/player-service
  IMAGE_NAME_FRONTEND: ${{ secrets.DOCKERHUBUSERNAME }}/PlayerMangementSystem/players-dashboard
  IMAGE_NAME_DB: ${{ secrets.DOCKERHUBUSERNAME }}/PlayerMangementSystem/mysql

jobs:
  test-backend:
    name: Test Backend Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log Step - Checkout
        run: |
          echo "=== CI/CD LOG ===" > ci_cd_log.txt
          echo "$(date): Step 1 - Checkout repository completed" | tee -a ci_cd_log.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Log Step - Java Setup
        run: |
          echo "$(date): Step 2 - Java 17 setup completed" | tee -a ci_cd_log.txt

      - name: Convert gradlew to Unix format
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          dos2unix ./PlayerService/gradlew
          echo "$(date): Step 3 - Converted gradlew to Unix format" | tee -a ci_cd_log.txt

      - name: Set execution permission for gradlew
        run: |
          chmod +x ./PlayerService/gradlew
          echo "$(date): Step 4 - Execution permission set for gradlew" | tee -a ci_cd_log.txt

      - name: Run Backend Tests
        run: |
          echo "$(date): Step 5 - Starting backend tests..." | tee -a ci_cd_log.txt
          cd PlayerService
          pwd | tee -a ../ci_cd_log.txt
          ./gradlew test --no-daemon --info | tee -a ../ci_cd_log.txt
          if [ $? -eq 0 ]; then
            echo "$(date): ‚úÖ Backend tests passed successfully!" | tee -a ../ci_cd_log.txt
          else
            echo "$(date): ‚ùå Backend tests failed!" | tee -a ../ci_cd_log.txt
            exit 1
          fi
          cd ..

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            PlayerService/build/test-results/
            PlayerService/build/reports/tests/
            ci_cd_log.txt

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log Step - Build Start
        run: |
          echo "$(date): Step 6 - Starting build and deploy process..." | tee -a ci_cd_log.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log Step - Docker Setup
        run: |
          echo "$(date): Step 7 - Docker Buildx setup completed" | tee -a ci_cd_log.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUBUSERNAME }}
          password: ${{ secrets.DOCKERHUBPASSWORD }}

      - name: Log Step - Docker Login
        run: |
          echo "$(date): Step 8 - Docker Hub login completed" | tee -a ci_cd_log.txt

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./PlayerService
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log Step - Backend Build
        run: |
          echo "$(date): Step 9 - Backend image built and pushed successfully" | tee -a ci_cd_log.txt

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./PlayersDashboard
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Log Step - Frontend Build
        run: |
          echo "$(date): Step 10 - Frontend image built and pushed successfully" | tee -a ci_cd_log.txt

      - name: Test Docker Compose
        run: |
          echo "$(date): Step 11 - Testing Docker Compose setup..." | tee -a ci_cd_log.txt
          # Install Docker Compose using pip (more reliable)
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install docker-compose
          docker-compose -f docker-compose.prod.yml up --build -d
          echo "$(date): Step 12 - Docker Compose services started" | tee -a ci_cd_log.txt

          # Wait for services to be healthy
          echo "$(date): Step 13 - Waiting for services to be healthy..." | tee -a ci_cd_log.txt
          timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 10; done' || true

          # Check service status
          echo "$(date): Step 14 - Checking service status..." | tee -a ci_cd_log.txt
          docker-compose -f docker-compose.prod.yml ps | tee -a ci_cd_log.txt

          # Test backend health endpoint
          echo "$(date): Step 15 - Testing backend health endpoint..." | tee -a ci_cd_log.txt
          sleep 30
          curl -f http://localhost:8080/actuator/health || echo "Backend health check failed" | tee -a ci_cd_log.txt

          # Test frontend
          echo "$(date): Step 16 - Testing frontend..." | tee -a ci_cd_log.txt
          curl -f http://localhost:80/ || echo "Frontend check failed" | tee -a ci_cd_log.txt

      - name: Tear down Docker Compose
        if: always()
        run: |
          echo "$(date): Step 17 - Tearing down Docker Compose services..." | tee -a ci_cd_log.txt
          docker-compose -f docker-compose.prod.yml down -v
          echo "$(date): Step 18 - Docker Compose services stopped" | tee -a ci_cd_log.txt

      - name: Output service logs
        if: always()
        run: |
          echo "$(date): Step 19 - Service logs:" | tee -a ci_cd_log.txt
          docker-compose -f docker-compose.prod.yml logs || echo "No logs available" | tee -a ci_cd_log.txt

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-and-deploy-logs
          path: ci_cd_log.txt
          retention-days: 30

      - name: Notify on success
        if: success()
        run: |
          echo "$(date): ‚úÖ CI/CD Pipeline completed successfully!" | tee -a ci_cd_log.txt
          echo "üéâ All tests passed, images built and deployed to Docker Hub"

      - name: Notify on failure
        if: failure()
        run: |
          echo "$(date): ‚ùå CI/CD Pipeline failed!" | tee -a ci_cd_log.txt
          echo "üö® Pipeline failed - check logs for details"
