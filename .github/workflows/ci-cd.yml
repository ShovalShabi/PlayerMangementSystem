name: CI for Player Management System

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log Step 1
        run: |
          echo "Step 1: Checkout repository" | tee -a ci_cd_log.txt

      # Step 2: Set up Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # Step 3: Convert gradlew to Unix line endings
      - name: Convert gradlew to Unix format
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          dos2unix ./PlayerService/gradlew
          echo "Converted gradlew to Unix format" | tee -a ci_cd_log.txt

      # Step 4: Set execution permission for gradlew
      - name: Set execution permission for gradlew
        run: |
          chmod +x ./PlayerService/gradlew
          echo "Execution permission set for gradlew" | tee -a ci_cd_log.txt

      # Step 5: Run Backend Tests Only
      - name: Run backend tests
        run: |
          echo "Running backend tests..." | tee -a ci_cd_log.txt
          cd PlayerService
          ../PlayerService/gradlew test --no-daemon | tee -a ../ci_cd_log.txt
          cd ..

      # Step 6: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log Step 2
        run: |
          echo "Step 2: Set up Docker Buildx" | tee -a ci_cd_log.txt

      # Step 7: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUBUSERNAME }}
          password: ${{ secrets.DOCKERHUBPASSWORD }}

      # Step 7.5: Create .env.prod for frontend
      - name: Create .env.prod for frontend
        run: |
          cat <<EOF > PlayersDashboard/.env.prod
          VITE_API_URL=${{ secrets.VITE_API_URL }}
          VITE_SOME_KEY=${{ secrets.VITE_SOME_KEY }}
          EOF

      # Step 8: Build Docker Compose Images
      - name: Build Docker Compose Images
        run: |
          echo "Step 7: Build Docker Compose Images" | tee -a ci_cd_log.txt
          sudo apt-get update | tee -a ci_cd_log.txt
          sudo apt-get install -y docker-compose-plugin | tee -a ci_cd_log.txt
          docker compose version | tee -a ci_cd_log.txt
          docker compose -f docker-compose.prod.yml build | tee -a ci_cd_log.txt

          echo "=== Docker images after build ===" | tee -a ci_cd_log.txt
          docker images | tee -a ci_cd_log.txt

          # Push all images with :latest tag built by docker compose
          for IMAGE in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep ':latest$'); do
            echo "Pushing image: $IMAGE" | tee -a ci_cd_log.txt
            docker push $IMAGE | tee -a ci_cd_log.txt
          done

      # Step 9: Start Docker Compose with built images
      - name: Start Docker Compose with built images
        run: |
          echo "Step 8: Start Docker Compose with built images" | tee -a ci_cd_log.txt
          docker compose -f docker-compose.prod.yml up -d | tee -a ci_cd_log.txt

      # Step 10: Tear down Docker Compose after tests
      - name: Tear Down Docker Compose
        run: |
          echo "Tearing down Docker Compose services..." | tee -a ci_cd_log.txt
          docker compose -f docker-compose.prod.yml down | tee -a ci_cd_log.txt

      # Step 11: Output logs for all services
      - name: Output logs for all services
        run: |
          echo "Service logs:" | tee -a ci_cd_log.txt
          docker compose -f docker-compose.prod.yml logs | tee -a ci_cd_log.txt

      # Step 12: Upload log file
      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ci_cd_log.txt
